<?php

namespace Pressbooks\Covergenerator;

use function Pressbooks\Utility\create_tmp_file;
use function Pressbooks\Utility\debug_error_log;
use function Pressbooks\Utility\template;
use Pressbooks\Container;

class PrinceJpg extends Generator {

	/**
	 * @var string
	 */
	protected $pdfProfile;

	/**
	 * Required HTML variables
	 *
	 * @var array
	 */
	protected $requiredHtmlVars = [
		'title',
		'author',
	];

	/**
	 * Optional HTML variables
	 *
	 * @var array
	 */
	protected $optionalHtmlVars = [
		'subtitle',
	];

	/**
	 * Required SASS variables (no dollar sign)
	 *
	 * @var array
	 */
	protected $requiredSassVars = [];

	/**
	 * Optional SASS variables (no dollar sign)
	 *
	 * @var array
	 */
	protected $optionalSassVars = [
		'text-transform',
		'trim-bleed',
		'front-background-color',
		'front-font-color',
		'front-background-image',
	];


	/**
	 * Constructor
	 *
	 * @param Input $input
	 */
	public function __construct( Input $input ) {
		parent::__construct( $input );
		$this->pdfProfile = apply_filters( 'pb_pdf_for_digital_profile', 'PDF/X-4' );
	}

	/**
	 * Generate Ebook JPG cover
	 *
	 * @throws \Exception
	 *
	 * @return string Output path
	 */
	public function generate() {
		$tmp_pdf_path = create_tmp_file();
		$success = $this->generateWithPrince( null, null, $this->generateHtml(), $tmp_pdf_path );
		if ( true !== $success ) {
			throw new \Exception( 'Failed to create PDF file' );
		}
		$output_path = $this->timestampedFileName( 'jpg' );
		$this->convert( $tmp_pdf_path, $output_path );
		delete_transient( 'dirsize_cache' ); /** @see get_dirsize() */
		return $output_path;
	}

	/**
	 * Generate CSS for Ebook JPG cover
	 *
	 * @return string the generated CSS
	 */
	protected function generateCss() {
		$styles = Container::get( 'Styles' );
		$scss = $this->getScssVars();

		if ( $styles->isCurrentThemeCompatible( 1 ) ) {
			$scss .= "@import 'fonts-prince'; \n";
		} elseif ( $styles->isCurrentThemeCompatible( 2 ) ) {
			$scss .= "@import 'fonts'; \n";
		}
		$scss .= \Pressbooks\Utility\get_contents( PB_PLUGIN_DIR . 'assets/covergenerator/_jpg.scss' );

		$css = $styles->customize( 'prince', $scss );
		$css = \Pressbooks\Sanitize\normalize_css_urls( $css );

		if ( WP_DEBUG ) {
			Container::get( 'Sass' )->debug( $css, $scss, 'cover-jpg' );
		}

		return $css;
	}


	/**
	 * Generate HTML for Ebook JPG cover
	 *
	 * @return string the generated Html
	 */
	protected function generateHtml() {
		$vars = $this->getHtmlTemplateVars();
		$vars['css'] = apply_filters( 'pb_epub_cover_css_override', $this->generateCss() );
		$html = template( PB_PLUGIN_DIR . 'templates/covergenerator/jpg-cover.php', $vars );
		return $html;
	}


	// Bonus info, originally tried cropping the PDF print cover to get the Ebook JPG cover, but the inch-to-pixel math wasn't working ( CSS Standard: 1 inch = 96 px, ImageMagick: 1 inch ~= 73.8 ?! )
	// Here's the command I was using for anyone from the future who wants to try:
	// $ convert -verbose -crop {WIDTH}x{HEIGHT}-0-0 -gravity SouthEast +repage PDF-print-cover.pdf output.png

	/**
	 * Use ImageMagick to convert a PDF to a JPG (max 2MB)
	 *
	 * @param string $path_to_pdf Input path to PDF
	 * @param string $path_to_jpg Output path to JPG
	 * @param string $resize
	 *
	 * @throws \Exception
	 */
	public function convert( $path_to_pdf, $path_to_jpg, $resize = '2500x3750' ) {

		// Convert using Imagemagick (TODO: fix jagged ugly fonts)
		// $command = PB_CONVERT_COMMAND . ' ' . escapeshellarg( $pathToPdf ) . " -density 96 -resize {$resize} -define jpeg:extent=2MB " . escapeshellarg( $pathToJpg );

		// Convert using pdfToPpm
		list( $x, $y ) = explode( 'x', $resize );
		$path_to_jpg = rtrim( $path_to_jpg, '.jpg' ); // Remove extension because it is auto-generated by pdfToPpm
		$command = PB_PDFTOPPM_COMMAND . ' -jpeg -singlefile -scale-to-x ' . (int) $x . ' -scale-to-y ' . (int) $y . ' ' . escapeshellarg( $path_to_pdf ) . ' ' . escapeshellarg( $path_to_jpg );

		// Execute command
		$output = [];
		$return_var = 0;
		exec( $command, $output, $return_var ); // @codingStandardsIgnoreLine

		// Fail safe routine converts png to jpeg
		if ( 0 !== $return_var && ! file_exists( $path_to_jpg ) ) {
			$command = PB_PDFTOPPM_COMMAND . ' -png -scale-to-x ' . (int) $x . ' -scale-to-y ' . (int) $y . ' ' . escapeshellarg( $path_to_pdf ) . ' ' . escapeshellarg( $path_to_jpg );
			unset( $output );
			unset( $return_var );
			exec( $command, $output, $return_var ); // @codingStandardsIgnoreLine

			$png_to_jpeg_command = PB_CONVERT_COMMAND . ' ' . $path_to_jpg . '-1.png ' . $path_to_jpg . '.jpg';
			unset( $output );
			unset( $return_var );
			exec( $png_to_jpeg_command, $output, $return_var ); // @codingStandardsIgnoreLine

			// imagemagick leaves behind a copy which we don't need
			if ( file_exists( $path_to_jpg . '.jpg' ) && file_exists( $path_to_jpg . '-1.png' ) ) {
				unlink( $path_to_jpg . '-1.png' );
			}
		}

		$post = ( new \Pressbooks\Metadata() )->getMetaPost();

		if ( $post ) {
			$jpg = \Pressbooks\Utility\create_tmp_file();

			copy( $path_to_jpg . '.jpg', $jpg );

			$old_id = \Pressbooks\Image\attachment_id_from_url( get_post_meta( $post->ID, 'pb_cover_image', true ) );
			if ( $old_id ) {
				wp_delete_attachment( $old_id, true );
			}

			if ( ! function_exists( 'media_handle_sideload' ) ) {
				require_once( ABSPATH . 'wp-admin/includes/image.php' );
				require_once( ABSPATH . 'wp-admin/includes/file.php' );
				require_once( ABSPATH . 'wp-admin/includes/media.php' );
			}

			$pid = media_handle_sideload(
				[
					'name' => 'cover.jpg',
					'tmp_name' => $jpg,
				], 0
			);
			if ( is_wp_error( $pid ) ) {
				throw new \Exception(
					$pid->get_error_message()
				);
			}

			$src = wp_get_attachment_url( $pid );

			if ( false === $src ) {
				throw new \Exception( 'No attachment url.' );
			}

			update_post_meta( $post->ID, 'pb_cover_image', $src );
		}

		if ( ! empty( $output ) ) {
			// @codingStandardsIgnoreStart
			debug_error_log( $command );
			debug_error_log( print_r( $output, true ) );
			// @codingStandardsIgnoreEnd
		}
	}
}
